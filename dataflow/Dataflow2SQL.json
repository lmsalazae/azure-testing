{
	"name": "Dataflow2SQL",
	"properties": {
		"description": "Flujo de datos a SQL",
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "ServiciovinculadoDATALAKE",
						"type": "LinkedServiceReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "ServiciovinculadoSQL",
						"type": "LinkedServiceReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1"
				},
				{
					"name": "ModificarFila1"
				}
			],
			"scriptLines": [
				"parameters{",
				"     SistemaArchivos as string ('fsdiplomado'),",
				"     DirectorioOrigen as string ('Virii/Product'),",
				"     NombreArchivo as string ('Product*.PARQUET'),",
				"     NombreTabla as string ('clean_Producto'),",
				"     EsquemaDestino as string ('SalesLT')",
				"}",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet',",
				"     fileSystem: ($SistemaArchivos),",
				"     wildcardPaths:[(concat($DirectorioOrigen, '/',$NombreArchivo))]) ~> source1",
				"source1 derive(each(match(type=='string'), $$ = coalesce($$,'sin datos')),",
				"          each(match(type=='integer'), $$ = coalesce($$,toInteger(0))),",
				"          each(match(name=='Weight'), $$ = coalesce(toDecimal($$),toDecimal('0.0'))),",
				"          each(match(type=='timestamp'), $$ = coalesce($$,toTimestamp('1990-01-01 00:00:00'))),",
				"          ColumnaPrueba = 'Viri',",
				"          ClumnaPrueba2 = currentTimestamp(),",
				"          ColumnaPrueba3 = 900) ~> derivedColumn1",
				"derivedColumn1 alterRow(upsertIf(true())) ~> ModificarFila1",
				"ModificarFila1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: ($EsquemaDestino),",
				"     tableName: ($NombreTabla),",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
			]
		}
	}
}