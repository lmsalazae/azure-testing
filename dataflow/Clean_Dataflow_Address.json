{
	"name": "Clean_Dataflow_Address",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage1",
						"type": "LinkedServiceReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1"
				},
				{
					"name": "ModifyColumns1",
					"description": "Autogenerated by data preview actions"
				}
			],
			"scriptLines": [
				"parameters{",
				"     FileSystemParam as string ('storage-sandbox'),",
				"     FolderPathParam as string ('landing/SalesOrderHeader'),",
				"     FileNameParam as string ('SalesOrderHeader*.parquet')",
				"}",
				"source(output(",
				"          SalesOrderID as integer,",
				"          RevisionNumber as integer,",
				"          OrderDate as timestamp,",
				"          DueDate as timestamp,",
				"          ShipDate as timestamp,",
				"          Status as integer,",
				"          OnlineOrderFlag as boolean,",
				"          SalesOrderNumber as string,",
				"          PurchaseOrderNumber as string,",
				"          AccountNumber as string,",
				"          CustomerID as integer,",
				"          ShipToAddressID as integer,",
				"          BillToAddressID as integer,",
				"          ShipMethod as string,",
				"          CreditCardApprovalCode as string,",
				"          SubTotal as decimal(19,4),",
				"          TaxAmt as decimal(19,4),",
				"          Freight as decimal(19,4),",
				"          TotalDue as decimal(19,4),",
				"          Comment as string,",
				"          rowguid as string,",
				"          ModifiedDate as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: true,",
				"     rowUrlColumn: 'FileName',",
				"     format: 'parquet',",
				"     fileSystem: ($FileSystemParam),",
				"     compressionCodec: 'snappy',",
				"     wildcardPaths:[(concat($FolderPathParam,'/',$FileNameParam))]) ~> source1",
				"ModifyColumns1 derive(each(match(type=='string'), $$ = coalesce($$,'No Data')),",
				"          each(match(type=='timestamp'), $$ = coalesce($$,toTimestamp('1990-01-01 00:00:00.000'))),",
				"          each(match(type=='integer'), $$ = coalesce($$,toInteger(0)))) ~> derivedColumn1",
				"source1 derive(each(match(name == 'Weight'), $$ = coalesce(toDecimal($$),toDecimal('0.0')))) ~> ModifyColumns1",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     store: 'cache',",
				"     format: 'inline',",
				"     output: false,",
				"     saveOrder: 1) ~> sink1"
			]
		}
	}
}