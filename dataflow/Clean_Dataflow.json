{
	"name": "Clean_Dataflow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage1",
						"type": "LinkedServiceReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "AzureSqlDatabase1",
						"type": "LinkedServiceReference"
					},
					"name": "sink1"
				},
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage1",
						"type": "LinkedServiceReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1"
				},
				{
					"name": "distinctRows"
				},
				{
					"name": "AlterRow1"
				}
			],
			"scriptLines": [
				"parameters{",
				"     FileSystemParam as string ('storage-sandbox'),",
				"     FolderPathParam as string ('landing/Address'),",
				"     FileNameParam as string ('Address*.parquet'),",
				"     SchemaNameSink as string ('CleanData'),",
				"     TableNameSink as string ('Address'),",
				"     FolderPathParamSink as string ('curated/Address')",
				"}",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: true,",
				"     format: 'parquet',",
				"     fileSystem: ($FileSystemParam),",
				"     compressionCodec: 'snappy',",
				"     wildcardPaths:[(concat($FolderPathParam,'/',$FileNameParam))]) ~> source1",
				"source1 derive(each(match(type=='string'), $$ = coalesce($$,'No Data')),",
				"          each(match(type=='timestamp'), $$ = coalesce($$,toTimestamp('1990-01-01 00:00:00.000'))),",
				"          each(match(type=='integer'), $$ = coalesce($$,toInteger(0))),",
				"          each(match(type=='boolean'), $$ = coalesce($$,toBoolean('false'))),",
				"          each(match(name=='Weight'||name=='SubTotal'||name=='TaxAmt'||name=='Freight'||name=='TotalDue'), $$ = coalesce(toDecimal($$),toDecimal('0.0')))) ~> derivedColumn1",
				"derivedColumn1 aggregate(groupBy(KeySha2 = sha2(256,columns())),",
				"     each(match(true()), $$ = first($$))) ~> distinctRows",
				"distinctRows alterRow(upsertIf(true())) ~> AlterRow1",
				"AlterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: ($SchemaNameSink),",
				"     tableName: ($TableNameSink),",
				"     insertable: false,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: true,",
				"     keys:['KeySha2'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink1",
				"distinctRows sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     fileSystem: ($FileSystemParam),",
				"     folderPath: (concat($FolderPathParamSink,'/',toString(fromUTC(currentUTC(),'America/Mexico_City')))),",
				"     compressionCodec: 'snappy',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1) ~> sink2"
			]
		}
	}
}